<?php

namespace Proxies\__CG__\Desymfony\DesymfonyBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Ponencia extends \Desymfony\DesymfonyBundle\Entity\Ponencia implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setTitulo($titulo)
    {
        $this->__load();
        return parent::setTitulo($titulo);
    }

    public function getTitulo()
    {
        $this->__load();
        return parent::getTitulo();
    }

    public function setSlug($slug)
    {
        $this->__load();
        return parent::setSlug($slug);
    }

    public function getSlug()
    {
        $this->__load();
        return parent::getSlug();
    }

    public function setDescripcion($descripcion)
    {
        $this->__load();
        return parent::setDescripcion($descripcion);
    }

    public function getDescripcion()
    {
        $this->__load();
        return parent::getDescripcion();
    }

    public function setFecha($fecha)
    {
        $this->__load();
        return parent::setFecha($fecha);
    }

    public function getFecha()
    {
        $this->__load();
        return parent::getFecha();
    }

    public function setHora($hora)
    {
        $this->__load();
        return parent::setHora($hora);
    }

    public function getHora()
    {
        $this->__load();
        return parent::getHora();
    }

    public function setDuracion($duracion)
    {
        $this->__load();
        return parent::setDuracion($duracion);
    }

    public function getDuracion()
    {
        $this->__load();
        return parent::getDuracion();
    }

    public function setIdioma($idioma)
    {
        $this->__load();
        return parent::setIdioma($idioma);
    }

    public function getIdioma()
    {
        $this->__load();
        return parent::getIdioma();
    }

    public function setPonente(\Desymfony\DesymfonyBundle\Entity\Ponente $ponente = NULL)
    {
        $this->__load();
        return parent::setPonente($ponente);
    }

    public function getPonente()
    {
        $this->__load();
        return parent::getPonente();
    }

    public function addUsuario(\Desymfony\DesymfonyBundle\Entity\Usuario $usuarios)
    {
        $this->__load();
        return parent::addUsuario($usuarios);
    }

    public function removeUsuario(\Desymfony\DesymfonyBundle\Entity\Usuario $usuarios)
    {
        $this->__load();
        return parent::removeUsuario($usuarios);
    }

    public function getUsuarios()
    {
        $this->__load();
        return parent::getUsuarios();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'titulo', 'slug', 'descripcion', 'fecha', 'hora', 'duracion', 'idioma', 'ponente', 'usuarios');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}